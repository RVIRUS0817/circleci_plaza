version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
  aws-ecs: circleci/aws-ecs@1.1.0
  slack: circleci/slack@3.4.2

parameters:
  deploy_app_devops_stg:
    type: boolean
    default: false

executors:
  docker_build:
    machine:
      docker_layer_caching: true

# rspec
jobs:
  rspec:
    docker:
      - image: circleci/ruby:2.7.1-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLER_VERSION: 2.1.4
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          DATABASE_HOST: '127.0.0.1'
          DATABASE_USER: 'root'
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_HOST: '%'
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: copy config files
          command: |
            cp config/mail.yml.example config/mail.yml

      - run:
          name: Which bundler?
          command: bundle -v

      - restore_cache:
          keys:
            - cache-gem-{{ checksum "Gemfile.lock" }}
            - cache-gem-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      - save_cache:
          key: cache-gem-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Database create
          command: DISABLE_SPRING=true bin/rake db:create --trace

      - run:
          name: Database setup
          command: DISABLE_SPRING=true bin/rake db:schema:load --trace

      - run:
          name: Run rspec
          environment:
            SALT: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
          command: |
            TZ=Asia/Tokyo \
              bundle exec rspec --profile 10 \
                                --out test_results/rspec.xml \
                                --format progress \
                                $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: 'Error rspec üö® \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: üëç
          color: '#42f486'
          message: 'rspec OK ‚ú® \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}

# stg
  deploy_app_devops_stg:
    working_directory: ~/app
    executor: docker_build
    steps:
      - checkout
      - run:
          name: echo authorized_keys
          command: |
            echo ${DEVOPS_KEY_STG} >> authorized_keys
      - run:
          name: setting aws configure
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_STG_S3} \
            && aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_STG_S3}
      - run:
          name: download .env
          command: |
            aws s3 cp s3://stg-adachin.com/stg/env .env
      - run:
          name: copy and echo mail.yml
          command: |
            cp config/mail.yml.example config/mail.yml \
            && sed -i "s/\${MAIL_PASS}/${MAIL_PASS}/g" config/mail.yml
      - run:
          name: copy and echo aws credentials
          command: |
            cp docker/stg/adachin-app/common/.aws/credentials credentials \
            && sed -i "2i aws_access_key_id =${AWS_ACCESS_KEY_ID_STG_S3}" credentials \
            && sed -i "3i aws_secret_access_key =${AWS_SECRET_ACCESS_KEY_STG_S3}" credentials
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_stg
          aws-access-key-id: AWS_ACCESS_KEY_ID_STG
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_STG
          region: AWS_REGION
          repo: 'adachin-app-stg'
          dockerfile: docker/stg/adachin-app/Dockerfile
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/update-service:
          family: 'adachin-app'
          service-name: 'adachin-app-service'
          cluster-name: 'adachin'
          container-image-name-updates: 'container=adachin-app,image-and-tag=${AWS_ECR_ACCOUNT_URL_STG}/adachin-app-stg:${CIRCLE_SHA1}'
      - aws-ecs/update-service:
          family: 'adachin-devops'
          service-name: 'adachin-devops-service'
          cluster-name: 'adachin'
          container-image-name-updates: 'container=adachin-devops,image-and-tag=${AWS_ECR_ACCOUNT_URL_STG}/adachin-app-stg:${CIRCLE_SHA1}'
      - aws-ecs/run-task:
          cluster: 'adachin'
          task-definition: 'adachin-app'
          count: 1
          launch-type: FARGATE
          awsvpc: true
          subnet-ids: subnet-xxxxxxx,subnet-xxxxxxxxxx,subnet-xxxxxxxxxxx
          security-group-ids: sg-xxxxxxxxxx
          overrides: "{\\\"containerOverrides\\\":[{\\\"name\\\": \\\"adachin-app\\\",\\\"command\\\": [\\\"bundle\\\", \\\"exec\\\", \\\"rake\\\", \\\"db:migrate\\\", \\\"RAILS_ENV=stg\\\"]}]}"
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: '[stg] Error container build/deploy üö® \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: stg üëç
          color: '#42f486'
          message: 'App,devops is build/deploy OK ‚ú® \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}

# prd
  deploy_app_devops_prd:
    working_directory: ~/app
    executor: docker_build
    steps:
      - checkout
      - run:
          name: echo authorized_keys
          command: |
            echo ${DEVOPS_KEY_PRD} >> authorized_keys
      - run:
          name: setting aws configure
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_PRD_S3} \
            && aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_PRD_S3}
      - run:
          name: download .env
          command: |
            aws s3 cp s3://adachin.com/prd/env .env
      - run:
          name: copy and echo mail.yml
          command: |
            cp config/mail.yml.example config/mail.yml \
            && sed -i "s/\${MAIL_PASS}/${MAIL_PASS}/g" config/mail.yml
      - run:
          name: copy and echo aws credentials
          command: |
            cp docker/prd/adachin-app/common/.aws/credentials credentials \
            && sed -i "2i aws_access_key_id =${AWS_ACCESS_KEY_ID_PRD_S3}" credentials \
            && sed -i "3i aws_secret_access_key =${AWS_SECRET_ACCESS_KEY_PRD_S3}" credentials
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_PRD
          aws-access-key-id: AWS_ACCESS_KEY_ID_PRD
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_PRD
          region: AWS_REGION
          repo: 'adachin-app'
          dockerfile: docker/prd/adachin-app/Dockerfile
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/update-service:
          family: 'adachin-app'
          service-name: 'adachin-app-service'
          cluster-name: 'adachin'
          container-image-name-updates: 'container=adachin-app,image-and-tag=${AWS_ECR_ACCOUNT_URL_PRD}/adachin-app:${CIRCLE_SHA1}'
      - aws-ecs/update-service:
          family: 'adachin-devops'
          service-name: 'adachin-devops-service'
          cluster-name: 'adachin'
          container-image-name-updates: 'container=adachin-devops,image-and-tag=${AWS_ECR_ACCOUNT_URL_PRD}/adachin-app:${CIRCLE_SHA1}'
      - aws-ecs/run-task:
          cluster: 'adachin'
          task-definition: 'adachin-app'
          count: 1
          launch-type: FARGATE
          awsvpc: true
          subnet-ids: subnet-xxxxxxx,subnet-xxxxxxx,subnet-xxxxxxxx
          security-group-ids: sg-xxxxxxxxxxxxx
          overrides: "{\\\"containerOverrides\\\":[{\\\"name\\\": \\\"adachin-app\\\",\\\"command\\\": [\\\"bundle\\\", \\\"exec\\\", \\\"rake\\\", \\\"db:migrate\\\", \\\"RAILS_ENV=production\\\"]}]}"
      - slack/status:
          fail_only: true
          mentions: 'here'
          failure_message: '[Prd] Error container build/deploy üö® \n :innocent: ${CIRCLE_USERNAME}     :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}
      - slack/notify:
          title: Prd üëç
          color: '#42f486'
          message: 'App,devops is build/deploy OK ‚ú® \n :grin: ${CIRCLE_USERNAME}   :branch: ${CIRCLE_BRANCH}'
          webhook: ${SLACK_WEBHOOK}  

workflows:
  version: 2
  rspec:
    jobs:
      - rspec
  deploy_stg:
    when: << pipeline.parameters.deploy_app_devops_stg >>
    jobs:
      - deploy_app_devops_stg
  deploy_prd:
    jobs:
      - deploy_app_devops_prd:
          filters:
            branches:
              only: master

