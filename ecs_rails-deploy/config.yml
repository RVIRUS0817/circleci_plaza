version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
  aws-ecs: circleci/aws-ecs@1.1.0
 
executors:
  default:
    docker:
      - image: circleci/ruby:2.5.7-stretch
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          DATABASE_HOST: '127.0.0.1'
          DATABASE_USER: 'root'
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_HOST: '%'
  docker_build:
    machine:
      docker_layer_caching: trueã€€
 
commands:
  bundle_install_rspec:
    steps:
      - run:
          name: copy config files
          command: |
            cp config/mail.yml.example config/mail.yml
      - run:
          name: Which bundler?
          command: bundle -v
 
      - restore_cache:
          keys:
            - cache-gem-{{ checksum "Gemfile.lock" }}
            - cache-gem-
 
      - run:
          name: Bundle Install
          command: bundle check || bundle install
 
      - save_cache:
          key: cache-gem-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
 
      - run:
          name: Database create
          command: DISABLE_SPRING=true bin/rake db:create --trace
 
      - run:
          name: Database setup
          command: DISABLE_SPRING=true bin/rake db:schema:load --trace
 
      - run:
          name: Run rspec
          command: |
            TZ=Asia/Tokyo \
              bundle exec rspec --profile 10 \
                                --out test_results/rspec.xml \
                                --format progress \
                                $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
 
## Pre
  build_and_push_docker_image_app_devops_pre:
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_PRE
          aws-access-key-id: AWS_ACCESS_KEY_ID_PRE
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_PRE
          region: AWS_REGION
          repo: 'adachin-app-pre'
          dockerfile: docker/pre/adachin-app/Dockerfile
          tag: "${CIRCLE_SHA1}"
 
      - aws-ecs/update-service:
          family: 'adachin-app'
          service-name: 'adachin-app-service'
          cluster-name: 'adachin'
          container-image-name-updates: 'container=adachin-app,image-and-tag=${AWS_ECR_ACCOUNT_URL_PRE}/adachin-app-pre:${CIRCLE_SHA1}'
 
      - aws-ecs/update-service:
          family: 'adachin-devops'
          service-name: 'adachin-devops-service'
          cluster-name: 'adachin'
          container-image-name-updates: 'container=adachin-devops,image-and-tag=${AWS_ECR_ACCOUNT_URL_PRE}/adachin-app-pre:${CIRCLE_SHA1}'
 
  db_migrate_app_pre:
    steps:
      - aws-ecs/run-task:
          cluster: 'adachin'
          task-definition: 'adachin-app'
          count: 1
          launch-type: FARGATE
          awsvpc: true
          subnet-ids: subnet-xxxxxxx,subnet-xxxxxxx,subnet-xxxxxxx
          security-group-ids: sg-xxxxxxx
          overrides: "{\\\"containerOverrides\\\":[{\\\"name\\\": \\\"adachin-app\\\",\\\"command\\\": [\\\"bundle\\\", \\\"exec\\\", \\\"rake\\\", \\\"db:migrate\\\", \\\"RAILS_ENV=pre\\\"]}]}"
 
jobs:
  rspec:
    working_directory: ~/rspec
    executor: default
    steps:
      - checkout
      - bundle_install_rspec
 
  deploy_app_devops_pre:
    working_directory: ~/app
    executor: default
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: check_changed_directory_terraform
          command: |
            if ! ~/app/scripts/circleci/is_changed_directory.sh "terraform"; then
              circleci step halt
            fi
      - add_ssh_keys:
          fingerprints:
            - "axxxxxxx"
      - run:
          name: find mv ssh key id_rsa_github,echo authorized_keys and copy config-ssh
          command: |
            find /home/circleci/.ssh -type f | grep '[0-9]' | xargs -I% mv % . \
            && echo ${DEVOPS_KEY_PRE} >> authorized_keys \
            && cp docker/pre/adachin-app/common/.ssh/config-ssh config-ssh
      - run:
          name: copy and echo .env
          command: |
            cp docker/pre/adachin-app/.env.example .env \
            && echo DATABASE_HOST="${DATABASE_HOST_PRE}" >> .env \
            && echo DATABASE_NAME="${DATABASE_NAME_PRE}" >> .env \
            && echo DATABASE_PASSWORD="${DATABASE_PASSWORD_PRE}" >> .env \
            && echo DATABASE_USER="${DATABASE_USER_PRE}" >> .env \
            && echo SECRET_KEY_BASE="${SECRET_KEY_BASE}" >> .env \
            && echo MAIL_PASSWORD="${MAIL_PASS}" >> .env \
            && echo CHATWORK_API_TOKEN="${CHATWORK_API_TOKEN}" >> .env \
            && echo CHATWORK_API_ROOM_ID="${CHATWORK_API_ROOM_ID_PRE}" >> .env \
            && echo BITLY_ACCESS_TOKEN="${BITLY_ACCESS_TOKEN}" >> .env \
            && echo AWS_S3_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_PRE_S3}" >> .env \
            && echo AWS_S3_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_PRE_S3}" >> .env \
            && echo AWS_S3_BUCKET_NAME="${AWS_S3_BUCKET_NAME_PRE}" >> .env
      - run:
          name: copy and echo mail.yml
          command: |
            cp config/mail.yml.example config/mail.yml \
            && sed -i "s/\${MAIL_PASS}/${MAIL_PASS}/g" config/mail.yml
      - run:
          name: copy and echo aws credentials
          command: |
            cp docker/pre/adachin-app/common/.aws/credentials credentials \
            && sed -i "2i aws_access_key_id =${AWS_ACCESS_KEY_ID_PRE_S3}" credentials \
            && sed -i "3i aws_secret_access_key =${AWS_SECRET_ACCESS_KEY_PRE_S3}" credentials
      - build_and_push_docker_image_app_devops_pre
      - db_migrate_app_pre
 
 
workflows:
  version: 2
  deploy_pre_and_rspec:
    jobs:
      - rspec
      - deploy_app_devops_pre:
          filters:
            branches:
              only: develop
